@@ -44,50 +44,53 @@
 	}

 	if strings.HasPrefix(pattern, "^") {
 		return matchHere(line, pattern[1:])
 	}

 	for i := range string(line) { // range over string handles multibyte utf-8 characters correctly
 		// try for every starting position
 		ok, err := matchHere(line[i:], pattern)
 		if err != nil {
 			return false, err
 		}
 		if ok {
 			return true, nil
 		}
 	}

 	return false, nil
 }

 func matchHere(line []byte, pattern string) (bool, error) {
 	switch {
 	case pattern == "": // empty pattern matches anything
 		return true, nil

+	case pattern == "$":
+		return len(line) == 0, nil
+
 	case len(line) == 0: // if there's no input, the match failed
 		return false, nil

 	case strings.HasPrefix(pattern, `\d`):
 		char, size := utf8.DecodeRune(line)
 		if !unicode.IsDigit(char) {
 			return false, nil
 		}

 		return matchHere(line[size:], pattern[2:]) // cut matching and continue for the remaining

 	case strings.HasPrefix(pattern, `\w`):
 		char, size := utf8.DecodeRune(line)
 		if !unicode.IsLetter(char) {
 			return false, nil
 		}

 		return matchHere(line[size:], pattern[2:])

 	case strings.HasPrefix(pattern, "[^"):
 		end := strings.IndexByte(pattern, ']')
 		charset := pattern[2:end]

 		char, size := utf8.DecodeRune(line)
 		if strings.ContainsRune(charset, char) {
